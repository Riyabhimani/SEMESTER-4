-- Creating PersonInfo Table 
	CREATE TABLE PersonInfo ( 
		PersonID INT PRIMARY KEY, 
		PersonName VARCHAR(100) NOT NULL, 
		Salary DECIMAL(8,2) NOT NULL, 
		JoiningDate DATETIME NULL, 
		City VARCHAR(100) NOT NULL, 
		Age INT NULL, 
		BirthDate DATETIME NOT NULL 
	); 

-- Creating PersonLog Table 
	CREATE TABLE PersonLog ( 
		PLogID INT PRIMARY KEY IDENTITY(1,1), 
		PersonID INT NOT NULL, 
		PersonName VARCHAR(250) NOT NULL, 
		Operation VARCHAR(50) NOT NULL, 
		UpdateDate DATETIME NOT NULL,
	); 

--Part – A 

--1. Create a trigger that fires on INSERT, UPDATE and DELETE operation on the PersonInfo table to display 
--a message “Record is Affected.”
	CREATE or alter TRIGGER TR_PERSONINFO_DML_OPERATION
	ON PERSONINFO
	AFTER INSERT,UPDATE,DELETE
	AS
	BEGIN
		PRINT 'RECORD IS AFFECTED.'
	END

	INSERT INTO PersonInfo VALUES (103,'ABC',10000,'2000-02-20','MORBI',20,'1980-02-20')
	INSERT INTO PersonInfo VALUES (111,'ajh',60000,null,'jbfr',56,'1980-02-20')

	SELECT * FROM PersonInfo

	DROP TRIGGER TR_PERSONINFO_DML_OPERATION

--2. Create a trigger that fires on INSERT, UPDATE and DELETE operation on the PersonInfo table. For that, 
--log all operations performed on the person table into PersonLog.
	
	--------------- INSERT ------------------
	CREATE TRIGGER TR_PERSONLOG_INSERT
	ON PERSONINFO
	AFTER INSERT
	AS
	BEGIN
		DECLARE @PERSONID INT,
				@PERSONNAME VARCHAR(100)

		SELECT @PERSONID = PERSONID ,
			   @PERSONNAME = PERSONNAME
		FROM inserted

		INSERT INTO PersonLog 
		VALUES (@PERSONID,@PERSONNAME,'INSERT',GETDATE())
	END

	INSERT INTO PersonInfo VALUES (104,'ABC',10000,'2000-02-20','MORBI',20,'1980-02-20')

	SELECT * FROM PersonLog
	SELECT * FROM PersonInfo

	DROP TRIGGER TR_PERSONLOG_INSERT

	--------------- UPDATE ------------------
	CREATE TRIGGER TR_PERSONLOG_UPDATE
	ON PERSONINFO
	AFTER UPDATE
	AS
	BEGIN
		DECLARE @PERSONID INT,
				@PERSONNAME VARCHAR(100)

		SELECT @PERSONID = PERSONID ,
			   @PERSONNAME = PERSONNAME
		FROM inserted

		INSERT INTO PersonLog 
		VALUES (@PERSONID,@PERSONNAME,'UPDATE',GETDATE())
	END

	UPDATE PersonInfo
	SET PersonName = 'XYZ'
	WHERE PersonID = 101

	SELECT * FROM PersonLog
	SELECT * FROM PersonInfo

	DROP TRIGGER TR_PERSONLOG_UPDATE

	--------------- DELETE ------------------
	CREATE TRIGGER TR_PERSONLOG_DELETE
	ON PERSONINFO
	AFTER DELETE
	AS
	BEGIN
		DECLARE @PERSONID INT,
				@PERSONNAME VARCHAR(100)

		SELECT @PERSONID = PERSONID ,
			   @PERSONNAME = PERSONNAME
		FROM deleted

		INSERT INTO PersonLog 
		VALUES (@PERSONID,@PERSONNAME,'DELETE',GETDATE())
	END

	DELETE FROM PersonInfo
	WHERE PersonID = 103

	SELECT * FROM PersonLog
	SELECT * FROM PersonInfo

	DROP TRIGGER TR_PERSONLOG_DELETE

--3. Create an INSTEAD OF trigger that fires on INSERT, UPDATE and DELETE operation on the PersonInfo 
--table. For that, log all operations performed on the person table into PersonLog.

	--------------- INSERT ------------------
	CREATE TRIGGER TR_PERSONLOG_INSTEAD_INSERT
	ON PERSONINFO
	INSTEAD OF INSERT
	AS
	BEGIN
		DECLARE @PERSONID INT,
				@PERSONNAME VARCHAR(100)

		SELECT @PERSONID = PERSONID ,
			   @PERSONNAME = PERSONNAME
		FROM inserted

		INSERT INTO PersonLog 
		VALUES (@PERSONID,@PERSONNAME,'INSERT',GETDATE())
	END

	INSERT INTO PersonInfo VALUES (103,'ABC',10000,'2000-02-20','MORBI',20,'1980-02-20')

	SELECT * FROM PersonLog
	SELECT * FROM PersonInfo

	DROP TRIGGER TR_PERSONLOG_INSTEAD_INSERT

	--------------- UPDATE ------------------
	CREATE TRIGGER TR_PERSONLOG_INSTEAD_UPDATE
	ON PERSONINFO
	INSTEAD OF UPDATE
	AS
	BEGIN
		DECLARE @PERSONID INT,
				@PERSONNAME VARCHAR(100)

		SELECT @PERSONID = PERSONID ,
			   @PERSONNAME = PERSONNAME
		FROM inserted

		INSERT INTO PersonLog 
		VALUES (@PERSONID,@PERSONNAME,'UPDATE',GETDATE())
	END

	UPDATE PersonInfo
	SET PersonName = 'PQR'
	WHERE PersonID = 101

	SELECT * FROM PersonLog
	SELECT * FROM PersonInfo

	DROP TRIGGER TR_PERSONLOG_UPDATE

	--------------- DELETE ------------------
	CREATE TRIGGER TR_PERSONLOG_INSTEAD_DELETE
	ON PERSONINFO
	INSTEAD OF DELETE
	AS
	BEGIN
		DECLARE @PERSONID INT,
				@PERSONNAME VARCHAR(100)

		SELECT @PERSONID = PERSONID ,
			   @PERSONNAME = PERSONNAME
		FROM deleted

		INSERT INTO PersonLog 
		VALUES (@PERSONID,@PERSONNAME,'DELETE',GETDATE())
	END

	DELETE FROM PersonInfo
	WHERE PersonID = 104

	SELECT * FROM PersonLog
	SELECT * FROM PersonInfo

	DROP TRIGGER TR_PERSONLOG_INSTEAD_DELETE

--4. Create a trigger that fires on INSERT operation on the PersonInfo table to convert person name into 
--uppercase whenever the record is inserted. 
	CREATE OR ALTER TRIGGER TR_PERSONINFO_UPPERNAME
	ON PERSONINFO
	AFTER INSERT
	AS
	BEGIN
		DECLARE @PERSONID INT,
				@PERSONNAME VARCHAR(100)

		SELECT @PERSONID = PERSONID ,
			   @PERSONNAME = UPPER(PERSONNAME)
		FROM inserted

		UPDATE PersonInfo
		SET PersonName = @PERSONNAME
		WHERE PersonID = @PERSONID

	END

	INSERT INTO PersonInfo VALUES (107,'pqr',10000,'2000-02-20','MORBI',20,'1980-02-20')

	SELECT * FROM PersonLog
	SELECT * FROM PersonInfo

	DROP TRIGGER TR_PERSONINFO_UPPERNAME

--5. Create trigger that prevent duplicate entries of person name on PersonInfo table. 
	CREATE TRIGGER TR_PERSONINFO_PREVENT_DUPLICATE_NAME
	ON PERSONINFO
	INSTEAD OF INSERT
	AS
	BEGIN
		INSERT INTO PERSONINFO
			SELECT 
				PERSONID,
				PERSONNAME,
				SALARY,
				JOININGDATE,
				CITY,
				AGE,
				BIRTHDATE
			FROM inserted
			WHERE PersonName NOT IN (SELECT PersonName FROM PersonInfo)
	END

	INSERT INTO PERSONINFO VALUES (108,'ABC',10000,'2000-02-20','MORBI',20,'1980-02-20')

	SELECT * FROM PersonLog
	SELECT * FROM PersonInfo

	DROP TRIGGER TR_PERSONINFO_PREVENT_DUPLICATE_NAME

--6. Create trigger that prevent Age below 18 years. 
	CREATE OR ALTER TRIGGER TR_PERSONINFO_AGE_BELOW_18
	ON PERSONINFO
	INSTEAD OF INSERT
	AS
	BEGIN
		INSERT INTO PERSONINFO
			SELECT 
				PERSONID,
				PERSONNAME,
				SALARY,
				JOININGDATE,
				CITY,
				AGE,
				BIRTHDATE
			FROM inserted
			WHERE Age > 18
	END

	INSERT INTO PERSONINFO VALUES (109,'ABC',10000,'2000-02-20','MORBI',17,'1980-02-20')

	SELECT * FROM PersonLog
	SELECT * FROM PersonInfo

	DROP TRIGGER TR_PERSONINFO_AGE_BELOW_18

--Part – B 

--7. Create a trigger that fires on INSERT operation on person table, which calculates the age and update 
--that age in Person table. 
	CREATE OR ALTER TRIGGER TR_PERSONINFO_UPDATE_AGE
	ON PERSONINFO
	INSTEAD OF INSERT
	AS
	BEGIN
		DECLARE @PERSONID INT,
				@AGE INT,
				@BIRTHDATE DATETIME

		SELECT @PERSONID = PERSONID,
			   @BIRTHDATE = BIRTHDATE,
			   @AGE = (DATEDIFF(YEAR,@BIRTHDATE,GETDATE()))
		FROM inserted

		UPDATE PersonInfo
		SET AGE = @AGE
		WHERE PersonID = @PERSONID

	END

	INSERT INTO PERSONINFO VALUES (108,'ABC',10000,'2000-02-20','MORBI',20,'1980-02-20')

	SELECT * FROM PersonLog
	SELECT * FROM PersonInfo

	DROP TRIGGER TR_PERSONINFO_UPDATE_AGE


--8. Create a Trigger to Limit Salary Decrease by a 10%.
	CREATE OR ALTER TRIGGER TR_PERSONINFO_DECREASE_SALARY
	ON PERSONINFO
	AFTER UPDATE
	AS
	BEGIN
		DECLARE @PERSONID INT,
			    @OLDSALARY DECIMAL(8,2),
				@NEWSALARY DECIMAL(8,2)

		SELECT @OLDSALARY = Salary 
		FROM deleted
		
		SELECT @NEWSALARY = Salary ,
			   @PERSONID = PERSONID 
		FROM INSERTED

		IF @NEWSALARY < @OLDSALARY * 0.9
		BEGIN
			UPDATE PersonInfo
			SET SALARY = @OLDSALARY
			WHERE PersonID = @PERSONID
		END
	END

	INSERT INTO PERSONINFO VALUES (109,'ABC',50000,'2000-02-20','MORBI',20,'1980-02-20')
	
	UPDATE PersonInfo
	SET SALARY = 45000
	WHERE PersonID = 108

	SELECT * FROM PersonLog
	SELECT * FROM PersonInfo

	DROP TRIGGER TR_PERSONINFO_DECREASE_SALARY

--Part – C  

--9. Create Trigger to Automatically Update JoiningDate to Current Date on INSERT if JoiningDate is NULL 
--during an INSERT. 
	CREATE OR ALTER TRIGGER TR_PERSONINFO_AUTO_UPDATE_JOININGDATE
	ON PersonInfo
	AFTER INSERT
	AS
	BEGIN
		DECLARE @JOININGDATE DATETIME,
				@PERSONID INT
		SELECT 
			@PERSONID=PERSONID,
			@JOININGDATE=JOININGDATE
		FROM PersonInfo

		UPDATE PersonInfo
		SET JOININGDATE=GETDATE()
		WHERE JoiningDate IS NULL
	END

	select * from PersonInfo
	select * from PersonLog

	INSERT INTO PERSONINFO VALUES (114,'ABC',10000,null,'MORBI',17,'1980-02-20')

	DROP TRIGGER TR_PERSONINFO_AUTO_UPDATE_JOININGDATE

--10. Create DELETE trigger on PersonLog table, when we delete any record of PersonLog table it prints 
--‘Record deleted successfully from PersonLog’.

	CREATE TRIGGER TR_PERSONLOG_LOGMSG_DELETE
	ON PersonLog
	INSTEAD OF DELETE
	AS
	BEGIN
		DECLARE @PLOGID INT
		SELECT @PLOGID=PLogID 
		FROM PersonLog

		DELETE 
		FROM PersonLog
		WHERE PLogID=@PLOGID

		PRINT('RECORD DELETED SUCCESSFULLY FROM PERSONLOG')
	END

	select * from PersonInfo
	select * from PersonLog

	DELETE 
	FROM PersonLog
	WHERE PLogID=14

	DROP TRIGGER TR_PERSONLOG_LOGMSG_DELETE