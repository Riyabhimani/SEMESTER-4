--------------	AFTER TRIGGER	------------

CREATE TABLE EMPLOYEEDETAILS
(
	EmployeeID Int Primary Key,
	EmployeeName Varchar(100) Not Null,
	ContactNo Varchar(100) Not Null,
	Department Varchar(100) Not Null,
	Salary Decimal(10,2) Not Null,
	JoiningDate DateTime Null
)

CREATE TABLE EmployeeLogs (
    LogID INT PRIMARY KEY IDENTITY(1,1),
    EmployeeID INT NOT NULL,
	EmployeeName VARCHAR(100) NOT NULL,
    ActionPerformed VARCHAR(100) NOT NULL,
    ActionDate DATETIME NOT NULL
);

--1)	Create a trigger that fires AFTER INSERT, UPDATE, and DELETE operations on the EmployeeDetails 
--	table to display the message "Employee record inserted", "Employee record updated", "Employee record deleted"
	
	-----	INSERT	-----

	CREATE OR ALTER TRIGGER TR_EMPLOYEEDETAILS_INSERT
	ON EMPLOYEEDETAILS
	AFTER INSERT
	AS
	BEGIN
		PRINT 'RECORD IS INSERTED.'
	END

	INSERT INTO EMPLOYEEDETAILS VALUES (1,'ABC','1234567890','cse',123.45,'2000-12-12')

	DROP TRIGGER TR_EMPLOYEEDETAILS_INSERT

	----- UPDATE -----

	CREATE OR ALTER TRIGGER TR_EMPLOYEEDETAILS_UPDATE
	ON EMPLOYEEDETAILS
	AFTER UPDATE
	AS
	BEGIN
		PRINT 'RECORD IS UPDATED.'
	END

	UPDATE EMPLOYEEDETAILS
	SET ContactNo = '1234567899'
	WHERE EmployeeID=1

	DROP TRIGGER TR_EMPLOYEEDETAILS_UPDATE

	-----	DELETE	-----

	CREATE OR ALTER TRIGGER TR_EMPLOYEEDETAILS_DELETE
	ON EMPLOYEEDETAILS
	AFTER DELETE
	AS
	BEGIN
		PRINT 'RECORD IS DELETED.'
	END

	DELETE 
	FROM EMPLOYEEDETAILS
	WHERE EmployeeID=1

	DROP TRIGGER TR_EMPLOYEEDETAILS_DELETE

--2)	Create a trigger that fires AFTER INSERT, UPDATE, and DELETE operations on the EmployeeDetails 
--	table to log all operations into the EmployeeLog table.

	--------------- INSERT ------------------

	CREATE OR ALTER TRIGGER TR_EMPLOYEEDETAILS_LOG_INSERT
	ON EMPLOYEEDETAILS
	AFTER INSERT
	AS
	BEGIN
		DECLARE @EMPLOYEEID INT,
				@EMPLOYEENAME VARCHAR(100)

		SELECT @EMPLOYEEID = EmployeeID ,
			   @EMPLOYEENAME = EmployeeName
		FROM inserted

		INSERT INTO EmployeeLogs 
		VALUES (@EMPLOYEEID,@EMPLOYEENAME,'INSERT',GETDATE())
	END

	INSERT INTO EMPLOYEEDETAILS VALUES (1,'ABC','1234567890','cse',123.45,'2000-12-12')

	SELECT * FROM EMPLOYEEDETAILS
	SELECT * FROM EmployeeLogs

	DROP TRIGGER TR_EMPLOYEEDETAILS_LOG_INSERT

	--------------- UPDATE ------------------

	CREATE TRIGGER TR_EMPLOYEEDETAILS_LOG_UPDATE
	ON EMPLOYEEDETAILS
	AFTER UPDATE
	AS
	BEGIN
		DECLARE @EMPLOYEEID INT,
				@EMPLOYEENAME VARCHAR(100)

		SELECT @EMPLOYEEID = EmployeeID ,
			   @EMPLOYEENAME = EmployeeName
		FROM inserted

		INSERT INTO EmployeeLogs 
		VALUES (@EMPLOYEEID,@EMPLOYEENAME,'UPDATE',GETDATE())
	END

	UPDATE EMPLOYEEDETAILS
	SET EmployeeName='FGCHJB'

	SELECT * FROM EMPLOYEEDETAILS
	SELECT * FROM EmployeeLogs

	DROP TRIGGER TR_EMPLOYEEDETAILS_LOG_UPDATE

	--------------- DELETE ------------------

	CREATE OR ALTER TRIGGER TR_EMPLOYEEDETAILS_LOG_DELETE
	ON EMPLOYEEDETAILS
	AFTER DELETE
	AS
	BEGIN
		DECLARE @EMPLOYEEID INT,
				@EMPLOYEENAME VARCHAR(100)

		SELECT @EMPLOYEEID = EmployeeID ,
			   @EMPLOYEENAME = EmployeeName
		FROM deleted

		INSERT INTO EmployeeLogs 
		VALUES (@EMPLOYEEID,@EMPLOYEENAME,'DELETE',GETDATE())
	END

	DELETE
	FROM EMPLOYEEDETAILS
	WHERE EmployeeID=1

	SELECT * FROM EMPLOYEEDETAILS
	SELECT * FROM EmployeeLogs

	DROP TRIGGER TR_EMPLOYEEDETAILS_LOG_DELETE

--3)	Create a trigger that fires AFTER INSERT to automatically calculate the joining bonus (10% of the salary)
--	for new employees and update a bonus column in the EmployeeDetails table.
	ALTER TABLE EMPLOYEEDETAILS ADD BONUS DECIMAL(10,2)

	CREATE OR ALTER TRIGGER TR_EMPLOYEEDETAILS_JOINING_BONUS
	ON EMPLOYEEDETAILS
	AFTER INSERT 
	AS
	BEGIN
		DECLARE @SALARY DECIMAL(10,2),
				@EMPLOYEEID INT

		SELECT 
			@SALARY = SALARY,
			@EMPLOYEEID = EMPLOYEEID
		FROM inserted

		UPDATE EMPLOYEEDETAILS
		SET BONUS = @SALARY * 0.10
		WHERE EmployeeID = @EMPLOYEEID
	END

INSERT INTO EMPLOYEEDETAILS (EmployeeID,EmployeeName,ContactNo,Department,Salary,JoiningDate) VALUES (1,'ABC','1234567890','cse',123.45,'2000-12-12')

SELECT * FROM EMPLOYEEDETAILS
SELECT * FROM EmployeeLogs

DROP TRIGGER TR_EMPLOYEEDETAILS_JOINING_BONUS

--4)	Create a trigger to ensure that the JoiningDate is automatically set to the current date if 
--	it is NULL during an INSERT operation.
	
	CREATE OR ALTER TRIGGER TR_EMPLOYEEDETAILS_AUTO_UPDATE_JOININGDATE
		ON EMPLOYEEDETAILS
		AFTER INSERT
		AS
		BEGIN
			DECLARE @JOININGDATE DATETIME,
					@EMPLOYEEID INT
			SELECT 
				@EMPLOYEEID=EMPLOYEEID,
				@JOININGDATE=JOININGDATE
			FROM EMPLOYEEDETAILS

			UPDATE EMPLOYEEDETAILS
			SET JOININGDATE=GETDATE()
			WHERE JoiningDate IS NULL
		END

INSERT INTO EMPLOYEEDETAILS (EmployeeID,EmployeeName,ContactNo,Department,Salary,JoiningDate) VALUES (2,'ABC','1234567890','cse',123.45,NULL)

SELECT * FROM EMPLOYEEDETAILS
SELECT * FROM EmployeeLogs

DROP TRIGGER TR_EMPLOYEEDETAILS_AUTO_UPDATE_JOININGDATE

--5)	Create a trigger that ensure that ContactNo is valid during insert and update 
--	(Like ContactNo length is 10)
	
